import pandas as pd
import math
import random
import numpy as np
import matplotlib.pyplot as plt

# draw roc pic
from sklearn import metrics
from sklearn.metrics import roc_curve

# 开始的时候利用一个数据集内划分测试，但是这样并不好，准确率太高了
# 取出数据
datasets = pd.read_excel('..\data\student2019.xlsx') # 默认跳过头了
test_datasets = pd.read_excel('..\data\student2018.xlsx')
datasets = (np.array(datasets)).tolist()
test_datasets = (np.array(test_datasets)).tolist()
# print(test_datasets)
# print(type(datasets[1][0]),type(datasets[1][1]))
# print(type(datasets))
# print(datasets)

class Bayes(object):
  def __init__(self,train_data):
    self.data = train_data
    self.model_para = {}# 存放每个特征的方差

  def mean(self,data):
    if type(data[0]) == str:
      return
    return sum(data)/float(len(data))

  def std(self,data):
  # 计算方差,公式为 [((x1-x)^2 + (x2-x)^2 + (x3-x)^3 + ...)/n - 1]^0.5
    if type(data[0]) == str:
      return
    mean = self.mean(data)
    sum = 0
    for x in data:
      sum += pow(x - mean,2)
    n = len(data) - 1
    temp = sum/float(n)
    return math.sqrt(temp)

  # 对每一类样本的每个特征计算均值和方差，结果保存在列表中，依次为第一维特征、第二维特征等...的均值和方差
  def summarize(self, vectors):
    # zip利用 * 号操作符，可以将不同元组或者列表压缩为为列表集合。用来提取每类样本下的每一维的特征集合
    summaries = [(self.mean(attribute), self.std(attribute)) for attribute in zip(*vectors)]
    # 将代表类别的最后一个数据删掉，只保留均值和方差
    del summaries[-1]
    return summaries

  def cal_probability(self,x,mean,std):
  # 计算每一个特征的概率密度
    a = -(pow(x - mean,2))
    b = 2 * pow(std,2)
    exponent = math.exp(a/b)
    left = 1 / math.sqrt(b * math.pi)
    return left * exponent

  def cal_class_pro(self,input_data,attr_num):
    # input_data 一个待分类数据
    # 可以三个特征都考虑，也可以改成一个或者两个
    probabilities = {}
    for class_value,class_sum in self.model_para.items():
      probabilities[class_value] = 1
      # print(len(class_sum))
      # for i in range(len(class_sum)):
      for i in range(0,attr_num):
        # print("i:",i)
        mean,std = class_sum[i]
        # 提取带分类数据的每一个特征值
        # 提取要测试的
        x = input_data[i]
        # 计算联合概率密度
        probabilities[class_value] *= self.cal_probability(x,mean,std)

    boy_pro,girl_pro = self.cal_prior()
    a = probabilities['男'] * boy_pro
    b = probabilities['女'] * girl_pro
    temp = (probabilities['男'] + probabilities['女'])
    aa = probabilities['男']/temp
    bb = probabilities['女']/temp
    print("man",aa,"girl",bb,"1-man = ",1-aa,"man_prediction = ",a,"girl_prediction = ",b)
    if a > b:
      prediction = '男'
      # return prediction,a
      return prediction,aa
    else:
      prediction = '女'
      #return prediction,b
      return prediction, bb
    # print(input_data,probabilities,"prediction",prediction)

  def train_bayes(self):
    # 把训练集按照男女分类
    seperated_class = {}
    for i in range(len(self.data)):
      student = self.data[i]
      # print(i,student)
      if student[-1] not in seperated_class:
        seperated_class[student[-1]] = []
      seperated_class[student[-1]].append(student)

    for class_value,student in seperated_class.items():
        # 将每一个类别的均值和方差保存在对应的键值对中
        # print(class_value,student)
        self.model_para[class_value] = self.summarize(student)
    return self.model_para

  def cal_prior(self):
    boy_prior = 0.5
    girl_prior = 1 - boy_prior
    return boy_prior,girl_prior

def split_dataset():

  splitRatio = 0.70
  trainSize = int(len(datasets) * splitRatio)
  trainSet = []
  copy = list(datasets)
  while len(trainSet) < trainSize:
    index = random.randrange(len(copy))
    # 原始数据集剔除训练集之后剩下的就是测试集
    trainSet.append(copy.pop(index))
  return [trainSet, copy]

def cal_accurency(testData,bayes):

  correct_nums = 0
  global y_true
  y_true = list()
  global prediction_list_forfun
  prediction_list_forfun = list()
  global prediction_list
  prediction_list = list()

  for i in range(len(testData)):

    train_re, prediction = bayes.cal_class_pro(testData[i], 3)
    # 3个时为 74%
    # 2个特征时 准确率为 68%
    # 1个 准确率为70
    sample_re = testData[i][-1]
    if sample_re == '男':
      y_true.append(1)
      prediction_list_forfun.append(prediction)
      print("sample_re = ", sample_re, "train_re = ", train_re, "prediction = ", prediction)
      temp = [sample_re, prediction]
      prediction_list.append(temp)
    elif sample_re == '女':
      y_true.append(0)
      prediction_list_forfun.append(prediction)
      print("sample_re = ", sample_re, "train_re = ", train_re, "prediction = ", prediction)
      temp = [sample_re,prediction]
      prediction_list.append(temp)

    if sample_re == train_re:
      correct_nums += 1

  return correct_nums

def get_sec(elem):
  return elem[1]

def draw_roc():

  # print(prediction_list)

  prediction_list.sort(key=get_sec,reverse=True)
  print(prediction_list)
  result_true = []
  thresholds = []
  for i in range(len(prediction_list)):
    print(prediction_list[i])
    if prediction_list[i][0] == '男':
      result_true.append(1)
      thresholds.append(prediction_list[i][1])
    elif prediction_list[i][0] == '女':
      result_true.append(0)
      thresholds.append(prediction_list[i][1])

  # threshold就是把每一个样本的概率按从小到大排列起来
  # 这里在计算

  tps = []
  fps = []
  for threshold in thresholds:

    # 大于等于阈值为1, 否则为0
    y_prob = [1 if i >= threshold else 0 for i in thresholds]
    # 结果是否正确
    result = [i == j for i, j in zip(result_true, y_prob)]
    # 是否预测为正类
    positive = [i == 1 for i in y_prob]

    tp = [i and j for i, j in zip(result, positive)]  # 预测为正类且预测正确
    fp = [(not i) and j for i, j in zip(result, positive)]  # 预测为正类且预测错误

    tps.append(tp.count(True))
    fps.append(fp.count(True))
    # print(tp.count(True), fp.count(True))

  print("fps=",fps,"tps=",tps)
  plt.plot(fps,tps,'b')
  plt.ylabel('tps')
  plt.xlabel('fps')
  plt.show()


  '''
  fpr = [i / fps[-1] for i in fps]
  tpr = [i / tps[-1] for i in tps]  # tps / tps[-1]
  plt.plot(fpr, tpr, 'r')
  plt.ylabel('tpr')
  plt.xlabel('fpr')
  plt.show()
  print(fpr,tpr)
  print(len(result_true))
  print(len(thresholds))
  '''
  print(y_true)
  print(prediction_list)
  fpr_1,tpr_1,threshold_1 = roc_curve(y_true,prediction_list_forfun,pos_label=1,drop_intermediate=False)
  plt.plot(fpr_1, tpr_1, 'r')
  plt.ylabel('tpr_func')
  plt.xlabel('fpr_func')
  plt.show()

if __name__ == '__main__':

  # trainData, testData = split_dataset()

  trainData = datasets
  testData = test_datasets
  bayes = Bayes(trainData)

  # model为训练之后的bayes分类器模型的概率参数
  model = bayes.train_bayes()
  print(model)
  correct_nums = cal_accurency(testData, bayes)
  print("分类准确率 %f%%" % (correct_nums / len(testData) * 100.0))
  draw_roc()
